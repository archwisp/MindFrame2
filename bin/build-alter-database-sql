#!/usr/bin/php
<?php // vim:ts=3:sts=3:sw=3:et:

if ($argc !== 6)
{
   echo "Reads the specified XML file and builds the SQL ALTER statements "
      . "which would update the existing database scema\n\n";

   printf("Usage: %s <xml-file> <dbms> <host> <username> <password>\n", $argv[0]);
   exit;
}

$file_name = realpath($argv[1]);
$dbms = $argv[2];
$host = $argv[3];
$username = $argv[4];
$password = $argv[5];

ini_set('display_errors', 1);
set_include_path(getcwd() . PATH_SEPARATOR . get_include_path());
chdir(dirname($argv[0]));
set_include_path('../..' . PATH_SEPARATOR . get_include_path());

require_once '../AutoLoad.php';

MindFrame2_AutoLoad::install();

$loader = new MindFrame2_Dbms_Schema_Builder_FromXml_Database();
$model = $loader->loadFromFile($file_name);

$adapter_class = 'MindFrame2_Dbms_Schema_Adapter_ToSql_' . ucfirst($dbms);
$adapter = new $adapter_class($model, ':', array());

$dbi = new MindFrame2_Dbms_Dbi_Single(
   new MindFrame2_Dbms_Connection_Ip($dbms, $host, 3306, $username, $password));

$tables = $model->getTables();

foreach ($tables as $table)
{
   $show_create_table_sql = $adapter->buildShowCreateTableSql($table->getName());

   try
   {
      $result = $dbi->query($show_create_table_sql, NULL);
      $record = $result->fetch(MindFrame2_Dbms_Result::FETCH_ASSOC);

      $create_table_sql = $record['Create Table'];

      $alter_table_sql = $adapter->buildAlterTableSql($table->getName(), $create_table_sql);
      
      if ($alter_table_sql !== FALSE)
      {
         echo "\n\n" . $alter_table_sql;
      }
   }
   catch (PDOException $exception)
   {
      $adapter_class = get_class($adapter);

      if ((int)$exception->errorInfo[1]
         !== constant($adapter_class . '::CODE_TABLE_DOESNT_EXIST'))
      {
         throw $exception;
      }
      
      $create_table_sql = $adapter->buildCreateTableSql(NULL, $table->getName());
      
      if ($create_table_sql !== FALSE)
      {
         echo "\n\n" . $create_table_sql;
      }
   }
}

echo "\n";
